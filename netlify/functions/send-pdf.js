// netlify/functions/send-pdf.js
const sgMail = require("@sendgrid/mail");
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

exports.handler = async (event) => {
  /* ──────────────────────────────────────────────────────────────
   * 1.  CORS + pre-flight
   * ──────────────────────────────────────────────────────────── */
  const CORS_HEADERS = {
    "Access-Control-Allow-Origin":  "*",
    "Access-Control-Allow-Headers": "Content-Type,x-api-key",
    "Access-Control-Allow-Methods": "OPTIONS,POST",
  };

  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers: CORS_HEADERS, body: "" };
  }

  /* ──────────────────────────────────────────────────────────────
   * 2.  Auth header
   * ──────────────────────────────────────────────────────────── */
  if (event.headers["x-api-key"] !== process.env.FUNC_API_KEY) {
    return { statusCode: 401, headers: CORS_HEADERS, body: "Unauthorized" };
  }

  /* ──────────────────────────────────────────────────────────────
   * 3.  Parse payload
   * ──────────────────────────────────────────────────────────── */
  let payload;
  try {
    payload = JSON.parse(event.body);
  } catch {
    return {
      statusCode: 400,
      headers:    CORS_HEADERS,
      body:       "Invalid JSON payload",
    };
  }

  /* Expect up to two data-URIs from the front-end */
  const {
    customer,
    pdfDataUri,        // ← legacy summary PDF
    quotePdf,          // ← alias for summary PDF if you renamed it
    breakdownPdf       // ← new cost-breakdown PDF (optional)
  } = payload;

  if (!customer || !(pdfDataUri || quotePdf)) {
    return {
      statusCode: 400,
      headers:    CORS_HEADERS,
      body:       "Missing customer or summary PDF",
    };
  }

  /* ──────────────────────────────────────────────────────────────
   * 4.  Build attachments
   * ──────────────────────────────────────────────────────────── */
  const attachments = [];

  /* Summary PDF (always present) */
  const summaryBase64 = (quotePdf || pdfDataUri).split(",")[1];
  attachments.push({
    content:     summaryBase64,
    filename:    `${customer.name || "Unknown"} Quote.pdf`,
    type:        "application/pdf",
    disposition: "attachment",
  });

  /* Breakdown PDF (optional) */
  if (breakdownPdf) {
    const breakdownBase64 = breakdownPdf.split(",")[1];
    attachments.push({
      content:     breakdownBase64,
      filename:    `${customer.name || "Unknown"} Quote Breakdown.pdf`,
      type:        "application/pdf",
      disposition: "attachment",
    });
  }

  /* ──────────────────────────────────────────────────────────────
   * 5.  Compose & send email
   * ──────────────────────────────────────────────────────────── */
  const msg = {
    to:    "neurophys2@gmail.com",
    from:  "neurophys2@gmail.com",
    subject: `New Muriphys Quote from ${customer.name || "Unknown"}`,
    text:    `PDF generated by ${customer.name} <${customer.email}>.`,
    attachments,
  };

  try {
    await sgMail.send(msg);
    return {
      statusCode: 200,
      headers:    CORS_HEADERS,
      body:       JSON.stringify({ message: "Email sent" }),
    };
  } catch (err) {
    const sgErrors = err.response?.body?.errors;
    console.error("SendGrid errors:", sgErrors || err.message);
    return {
      statusCode: 500,
      headers:    CORS_HEADERS,
      body:       JSON.stringify({ errors: sgErrors || [err.message] }),
    };
  }
};
